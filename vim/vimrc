set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
" call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
" Plugin 'tpope/vim-fugitive'
" plugin from http://vim-scripts.org/vim/scripts.html
" Plugin 'L9'
" Git plugin not hosted on GitHub
" Plugin 'git://git.wincent.com/command-t.git'
" git repos on your local machine (i.e. when working on your own plugin)
" Plugin 'file:///home/gmarik/path/to/plugin'
" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
" Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" Avoid a name conflict with L9
" Plugin 'user/L9', {'name': 'newL9'}

Plugin 'Chiel92/vim-autoformat'
Plugin 'Raimondi/delimitMate'
" Plugin 'SirVer/ultisnips'
" Plugin 'Valloric/YouCompleteMe'
Plugin 'Xuyuanp/nerdtree-git-plugin'
Plugin 'Yggdroot/indentLine'
Plugin 'airblade/vim-gitgutter'
Plugin 'bling/vim-airline'
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'derekwyatt/vim-scala'
Plugin 'dyng/ctrlsf.vim'
Plugin 'easymotion/vim-easymotion'
Plugin 'fatih/vim-go'
Plugin 'hdima/python-syntax'
Plugin 'honza/vim-snippets'
Plugin 'ivalkeen/vim-ctrlp-tjump'
Plugin 'jeetsukumaran/vim-buffergator'
" Plugin 'kshenoy/vim-signature'
Plugin 'majutsushi/tagbar'
Plugin 'mileszs/ack.vim'
Plugin 'morhetz/gruvbox'
Plugin 'nixprime/cpsm'
" Plugin 'nsf/gocode', {'rtp': 'vim/'}
Plugin 'ntpeters/vim-better-whitespace'
Plugin 'octol/vim-cpp-enhanced-highlight'
Plugin 'scrooloose/nerdcommenter'
Plugin 'scrooloose/nerdtree'
" Plugin 'scrooloose/syntastic'
Plugin 'szw/vim-tags'
Plugin 'terryma/vim-expand-region'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-surround'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
" filetype plugin on


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Modified based on Amir Salihefendic's vimrc
"
" Original Raw_version:
"       http://amix.dk/vim/vimrc.txt
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Sets how many lines of history VIM has to remember
set history=700

" Enable filetype plugins
filetype plugin on
filetype indent on

" Set to auto read when a file is changed from the outside
set autoread

" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
let mapleader=","
let g:mapleader=","

" quick save
nnoremap <leader>w :w<cr>
nnoremap <leader>q :q<cr>

" :W sudo saves the file
" (useful for handling the permission-denied error)
" command W w !sudo tee % > /dev/null


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Vim user interface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Set 7 lines to the cursor - when moving vertically using j/k
set so=3

" Turn on the WiLd menu
set wildmenu

" Ignore
" set wildignore=*.o,*~,*.pyc,*.zip,*.so

" Always show current position
set ruler

" Height of the command bar
set cmdheight=2

" A buffer becomes hidden when it is abandoned
set hid

" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" In many terminal emulators the mouse works just fine, thus enable it.
set mouse=a

" Ignore case when searching
set ignorecase

" When searching try to be smart about cases
set smartcase

" Highlight search results
set hlsearch

" Makes search act like search in modern browsers
set incsearch

" Don't redraw while executing macros (good performance config)
set lazyredraw

" For regular expressions turn magic on
set magic

" Show matching brackets when text indicator is over them
set showmatch

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" folding settings
" fold based on indent
set foldmethod=indent
" set foldmethod=syntax
" deepest fold is 10 levels
set foldnestmax=10
" dont fold by default
set nofoldenable
" this is just what i use
set foldlevel=1
" Add a bit extra margin to the left
set foldcolumn=1

" Line number
set number

" preview
" set completeopt=menu,preview,longest
set completeopt-=preview

" highlight current line
set cursorline


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Colors and Fonts
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Enable syntax highlighting
syntax enable

" set background=dark
set background=dark
set t_Co=256

if has('gui_running')
  let g:gruvbox_italic=1
endif

" let g:gruvbox_contrast_dark='hard'
" let g:gruvbox_contrast_light='soft'
colorscheme gruvbox

" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf8

" Use Unix as the standard file type
set ffs=unix,dos,mac


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Gui
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if has('gui_running')
  set guioptions-=l
  set guioptions-=L
  set guioptions-=r
  set guioptions-=R
  set guioptions-=m
  set guioptions-=T
  set guifont=Source\ Code\ Pro\ SemiBold\ 12

  set lines=35
  set columns=138

  " fun! ToggleFullscreen()
  " call system("wmctrl -ir " . v:windowid . " -b toggle,fullscreen")
  " endf

  " autocmd GUIEnter * call ToggleFullscreen()
endif


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Files, backups and undo
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Turn backup off, since most stuff is in SVN, git et.c anyway...
set nobackup
set nowritebackup
set noswapfile


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Text, tab and indent related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Use spaces instead of tabs
set expandtab

" Be smart when using tabs ;)
set smarttab

" 1 tab == 2 spaces
set shiftwidth=2
set tabstop=2

" No linebreak
set nolinebreak
" set textwidth=0

set autoindent " Auto indent
set smartindent " Smart indent

set nowrap "Don't Wrap lines
autocmd FileType markdown setlocal wrap linebreak


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Moving around, tabs, windows and buffers
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Treat long lines as break lines (useful when moving around in them)
map j gj
map k gk

" Disable highlight when <leader><cr> is pressed
map <silent> <leader><cr> :noh<cr>

" Smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" Useful mappings for managing tabs
map <leader>tn :tabnew<cr>
map <leader>to :tabonly<cr>
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove
map <leader>t<leader> :tabnext
map <leader>t? :map <leader>t <cr>

map <leader>1 :tabnext1<cr>
map <leader>2 :tabnext2<cr>
map <leader>3 :tabnext3<cr>
map <leader>4 :tabnext4<cr>
map <leader>5 :tabnext5<cr>
map <leader>6 :tabnext6<cr>
map <leader>7 :tabnext7<cr>
map <leader>8 :tabnext8<cr>
map <leader>9 :tabnext9<cr>

" Opens a new tab with the current buffer's path
" Super useful when editing files in the same directory
map <leader>te :tabedit <c-r>=expand("%:p:h")<cr>/

" Specify the behavior when switching between buffers
set switchbuf=useopen,usetab,newtab

" Return to last edit position when opening files (You want this!)
autocmd BufReadPost *
      \ if line("'\"") > 0 && line("'\"") <= line("$") |
      \   exe "normal! g`\"" |
      \ endif

" Remember info about open buffers on close
" set viminfo^=%


""""""""""""""""""""""""""""""
" => Status line
""""""""""""""""""""""""""""""
" Always show the status line
set laststatus=2

" Format the status line
" set statusline=[%n]%t[%{strlen(&fenc)?&fenc:'none'},%{&ff}]%h%m%r%y%=%c,%l/%L\ %P


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Editing mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
func! Replace(confirm, wholeword, replace)
  wa
  let flag = ''

  if a:confirm
    let flag .= 'gec'
  else
    let flag .= 'ge'
  endif

  let search = ''

  if a:wholeword
    let search .= '\<' . escape(expand('<cword>'), '/\.*$^~[') . '\>'
  else
    let search .= expand('<cword>')
  endif

  let replace = escape(a:replace, '/\&~')
  execute 'argdo %s/' . search . '/' . replace . '/' . flag . '| update'
endf

" don't confirm, not whole word
nnoremap <leader>R :call Replace(0, 0, input('Replace '.expand('<cword>').' with: '))<cr>
" don't confirm, whole word
nnoremap <leader>rw :call Replace(0, 1, input('Replace '.expand('<cword>').' with: '))<cr>
" confirm, not whole word
nnoremap <leader>rc :call Replace(1, 0, input('Replace '.expand('<cword>').' with: '))<cr>
" confirm, whole word
nnoremap <leader>rcw :call Replace(1, 1, input('Replace '.expand('<cword>').' with: '))<cr>

map <leader>pp :setlocal paste!<cr>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Spell checking
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Pressing ,ss will toggle and untoggle spell checking
nmap <leader>ss :setlocal spell!<cr>

" Shortcuts using <leader>
nmap <leader>sn :echo 'Next misspelled word' <bar> ]s<cr>
nmap <leader>sp [s
nmap <leader>sa zg
nmap <leader>sg z=
nmap <leader>s? :map <leader>s<cr>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Omni
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let OmniCpp_DefaultNamespaces=["std", "_GLIBCXX_STD"]


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Plugins
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""" YouCompleteMe
let g:ycm_min_num_of_chars_for_completion=1
let g:ycm_show_diagnostics_ui=0
" ☹ ⚑
let g:ycm_error_symbol='✗'
let g:ycm_warning_symbol='⚠'
let g:ycm_always_populate_location_list=1
let g:ycm_complete_in_comments=1
let g:ycm_collect_identifiers_from_comments_and_strings=1
let g:ycm_collect_identifiers_from_tags_files=1
let g:ycm_add_preview_to_completeopt=0
let g:ycm_autoclose_preview_window_after_completion=1
let g:ycm_autoclose_preview_window_after_insertion=1
let g:ycm_key_list_select_completion=['<C-j>']
let g:ycm_key_list_previous_completion=['<C-k>']
let g:ycm_global_ycm_extra_conf='~/.ycm_extra_conf.py'
let g:ycm_extra_conf_globlist=['~/*']
let g:ycm_cache_omnifunc=0
let g:ycm_disable_for_files_larger_than_kb=0

" nnoremap <leader>gd :YcmCompleter GoToDefinitionElseDeclaration<cr>
" nnoremap <F5> :YcmForceCompileAndDiagnostics<cr>
nnoremap <leader>gdl :YcmCompleter GoToDeclaration<cr>
nnoremap <leader>gd :YcmCompleter GoToDefinition<cr>
nnoremap <leader>g :YcmCompleter GoTo<cr>
nnoremap <leader>gt :YcmCompleter GetType<cr>
nnoremap <leader>gp :YcmCompleter GetParent<cr>
" go to implementation
nnoremap <leader>g? :nnoremap <leader>g<cr>

" OmniCppComplete key
inoremap <leader>; <C-x><C-o>


"""""""""" UltiSnips
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<C-e>"
let g:UltiSnipsJumpForwardTrigger="<C-n>"
let g:UltiSnipsJumpBackwardTrigger="<C-p>"
" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"


"""""""""" syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list=1
let g:syntastic_auto_loc_list=0
let g:syntastic_check_on_open=0
let g:syntastic_check_on_wq=0

let g:syntastic_error_symbol='✗'
let g:syntastic_style_error_symbol='⚑'
let g:syntastic_warning_symbol='⚠'
let g:syntastic_style_warning_symbol='⚑'

let g:syntastic_c_compiler='clang'
let g:syntastic_c_compiler_options='-std=c11'

let g:syntastic_cpp_compiler='clang++'
let g:syntastic_cpp_compiler_options='-std=c++11 -Weverything -Wno-c++11-extensions -Wno-c++98-compat'

nnoremap <leader>ee :call ToggleErrors()<cr>

" try to close the location panel first
" and check if the last window number is changed or not.
func! ToggleErrors()
  let old_last_winnr = winnr('$')
  lclose

  if old_last_winnr == winnr('$')
    " Nothing was closed, open syntastic error location panel
    Errors
  endif
endf


"""""""""" nerdcommenter
let g:NERDSpaceDelims=1

map <leader>c? :map <leader>c<cr>


"""""""""" nerdtree
let g:NERDTreeMinimalUI=1
let g:NERDTreeWinSize=32
let g:NERDTreeAutoDeleteBuffer=1

map <F3> :NERDTreeToggle<cr>
" autocmd VimEnter * NERDTreeToggle
autocmd QuitPre * NERDTreeClose


"""""""""" tagbar
let g:tagbar_compact=1
let g:tagbar_width=32

let g:tagbar_type_c = {
      \ 'kinds': [
      \ 'd:macros:1:0',
      \ 'p:prototypes:1:0',
      \ 'g:enums',
      \ 'e:enumerators:0:0',
      \ 't:typedefs:0:0',
      \ 'n:namespaces',
      \ 'c:classes',
      \ 's:structs',
      \ 'u:unions',
      \ 'f:functions',
      \ 'm:members:0:0',
      \ 'v:variables:0:0',
      \ 'x:external:0:0',
      \ 'l:local:0:0'
      \ ]
      \ }

let g:tagbar_type_cpp = {
      \ 'kinds': [
      \ 'd:macros:1:0',
      \ 'p:prototypes:1:0',
      \ 'g:enums',
      \ 'e:enumerators:0:0',
      \ 't:typedefs:0:0',
      \ 'n:namespaces',
      \ 'c:classes',
      \ 's:structs',
      \ 'u:unions',
      \ 'f:functions',
      \ 'm:members:0:0',
      \ 'v:variables:0:0',
      \ 'x:external:0:0',
      \ 'l:local:0:0'
      \ ]
      \ }

let g:tagbar_type_scala = {
      \ 'ctagstype': 'scala',
      \ 'sro': '.',
      \ 'kinds': [
      \ 'p:packages',
      \ 'T:types:1',
      \ 't:traits',
      \ 'o:objects',
      \ 'O:case objects',
      \ 'c:classes',
      \ 'C:case classes',
      \ 'm:methods',
      \ 'V:values:1',
      \ 'v:variables:1'
      \ ]
      \ }

let g:tagbar_type_rust = {
      \ 'ctagstype': 'rust',
      \ 'kinds': [
      \ 'T:types,type definitions',
      \ 'f:functions,function definitions',
      \ 'g:enum,enumeration names',
      \ 's:structure names',
      \ 'm:modules,module names',
      \ 'c:consts,static constants',
      \ 't:traits,traits',
      \ 'i:impls,trait implementations',
      \ ]
      \ }

let g:tagbar_type_go = {
      \ 'ctagstype': 'go',
      \ 'kinds': [
      \ 'p:package',
      \ 'i:imports:1',
      \ 'c:constants',
      \ 'v:variables',
      \ 't:types',
      \ 'n:interfaces',
      \ 'w:fields',
      \ 'e:embedded',
      \ 'm:methods',
      \ 'r:constructor',
      \ 'f:functions'
      \ ],
      \ 'sro': '.',
      \ 'kind2scope': {
      \ 't': 'ctype',
      \ 'n': 'ntype'
      \ },
      \ 'scope2kind': {
      \ 'ctype': 't',
      \ 'ntype': 'n'
      \ },
      \ 'ctagsbin': 'gotags',
      \ 'ctagsargs': '-sort -silent'
      \ }

map <F4> :TagbarToggle<cr>

autocmd QuitPre * TagbarClose
" autocmd VimEnter * nested :call tagbar#autoopen(1)
" autocmd FileType * nested :call tagbar#autoopen(0)
" autocmd BufEnter * nested :call tagbar#autoopen(0)


"""""""""" indentLine
" c, ¦, ┆ or │
let g:indentLine_char='┆'


"""""""""" airline
let g:airline_powerline_fonts=0
" let g:airline_theme='solarized'
let g:airline#extensions#tabline#enabled=1


"""""""""" python syntax
let python_highlight_all=1


"""""""""" vim-autoformat
map <leader>af :Autoformat<cr>
" autocmd BufWrite *.h :Autoformat

let g:formatdef_google_clang_format='"clang-format -style=Google"'
let g:formatters_cpp=['google_clang_format']
let g:formatters_c=['google_clang_format']

let g:formatdef_yapf_format='"yapf --style=google"'
let g:formatters_python=['yapf_format']


"""""""""" vim-easymotion
" Gif config
map  / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)

" These `n` & `N` mappings are options. You do not have to map `n` & `N` to EasyMotion.
" Without these mappings, `n` & `N` works fine. (These mappings just provide
" different highlight method and have some other features )
" map  n <Plug>(easymotion-next)
" map  N <Plug>(easymotion-prev)

map <leader>l <Plug>(easymotion-lineforward)
map <leader>j <Plug>(easymotion-j)
map <leader>k <Plug>(easymotion-k)
map <leader>h <Plug>(easymotion-linebackward)

" keep cursor column when JK motion
let g:EasyMotion_startofline=0

let g:EasyMotion_smartcase=1


"""""""""" ctrlp
" Enabled extensions
let g:ctrlp_extensions=['tag', 'line', 'buffertag', 'mixed', 'quickfix', 'dir', 'rtscript', 'undo', 'changes', 'bookmarkdir']

" Use the nearest .git directory as the cwd
" This makes a lot of sense if you are working on a project that is in version
" control. It also supports works with .svn, .hg, .bzr.
let g:ctrlp_working_path_mode='ra'

let g:ctrlp_root_markers=['CMakeLists.txt']

let g:ctrlp_max_files=0

let g:ctrlp_match_func={'match': 'cpsm#CtrlPMatch'}

" Easy bindings for its various modes
nmap <leader>b :CtrlPBuffer<cr>
nmap <leader>m :CtrlPMixed<cr>
nmap <leader>r :CtrlPMRU<cr>
nmap <leader>t :CtrlPTag<cr>


"""""""""" CtrlPtjump
nnoremap <leader>gi :CtrlPtjump<cr>
vnoremap <leader>gi :CtrlPtjumpVisual<cr>
let g:ctrlp_tjump_only_silent=1


"""""""""" buffergator
" Use the right side of the screen
let g:buffergator_viewport_split_policy='R'

" Disable default keys
let g:buffergator_suppress_keymaps=1

let g:buffergator_autoexpand_on_split=0

" Go to the previous buffer open
nmap <leader>jj :BuffergatorMruCyclePrev<cr>

" Go to the next buffer open
nmap <leader>kk :BuffergatorMruCycleNext<cr>

" Toggle the entire list of buffers open
nmap <F2> :BuffergatorToggle<cr>

nmap <leader>en :enew<cr>
nmap <leader>bq :bp <BAR> bd #<cr>


"""""""""" vim-tags
set tags=./tags;,~/.vim/tags/stdcpp.tags
let g:vim_tags_ignore_files=['.gitignore', '.svnignore', '.cvsignore']
let g:vim_tags_directories=['CMakeLists.txt', 'Makefile']
let g:vim_tags_use_language_field=0
let g:vim_tags_project_tags_command='{CTAGS} -R --c-kinds=+p+l+x+c+d+e+f+g+m+n+s+t+u+v --c++-kinds=+p+l+x+c+d+e+f+g+m+n+s+t+u+v --fields=+iaSl --extra=+q {OPTIONS} {DIRECTORY} 2>/dev/null'
nmap <leader>tg :TagsGenerate!<cr>


"""""""""" vim-cpp-enhanced-highlight
let c_no_curly_error=1


"""""""""" ctrlsf
nnoremap <Leader>sf :CtrlSF<CR>


"""""""""" vim-better-whitespace
autocmd BufWrite * StripWhitespace
autocmd VimEnter * ToggleWhitespace
" let g:better_whitespace_filetypes_blacklist=[]


"""""""""" ack
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif
